version: '3.8'

services:
  # ================= DATA BASES =================
  mongo-db:
    image: mongo
    container_name: mongo-db
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    networks:
      - bantads-net
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-db:
    image: postgres
    container_name: postgres-db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    volumes:
      - ./back-end/init-databases:/docker-entrypoint-initdb.d
    networks:
      - bantads-net
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "admin"]
      interval: 5s
      timeout: 5s
      retries: 5

  # ================ RABBIT MQ =====================
  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: rabbitmq
    networks:
      - bantads-net
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============== MICROSERVIÃ‡OS ===============
  # =============== AUTH ========================
  ms-auth:
    build:
      context: ./back-end/ms-auth
      dockerfile: Dockerfile
    container_name: ms-auth
    ports:
      - "8080:8080"
    environment:
      SPRING_DATA_MONGODB_HOST: mongo-db
      SPRING_DATA_MONGODB_PORT: 27017
      SPRING_DATA_MONGODB_DATABASE: auth_db
      SPRING_DATA_MONGODB_URI: mongodb://admin:admin@mongo-db:27017/auth_db?authSource=admin
    depends_on:
      mongo-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - bantads-net

  # =============== CLIENTE ===============
  ms-cliente:
    build:
      context: ./back-end/ms-cliente
      dockerfile: Dockerfile
    container_name: ms-cliente
    ports:
      - "8081:8081"
    depends_on:
      postgres-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - bantads-net

  # =============== CONTA ===============
  ms-conta:
    build:
      context: ./back-end/ms-conta
      dockerfile: Dockerfile
    container_name: ms-conta
    ports:
      - "8082:8082"
    depends_on:
      postgres-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - bantads-net

  # =============== GERENTE ===============
  ms-gerente:
    build:
      context: ./back-end/ms-gerente
      dockerfile: Dockerfile
    container_name: ms-gerente
    ports:
      - "8083:8083"
    depends_on:
      postgres-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - bantads-net

#================ SAGA ======================
  ms-saga:
    build:
      context: ./back-end/ms-saga
      dockerfile: Dockerfile
    container_name: ms-saga
    ports:
      - "8084:8084"
    depends_on:
      mongo-db:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    networks:
      - bantads-net

# =============== API GATEWAY ===============
  api-gateway:
    build:
      context: ./back-end/api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "3000:3000"
    depends_on:
      - ms-auth
      - ms-cliente
      - ms-conta
      - ms-gerente
      - ms-saga
    networks:
      - bantads-net

 # =============== FRONTEND ===============
#  angular-frontend:
#    container_name: frontend
#    build:
#      context: ./front-end/
#      dockerfile: Dockerfile
#    ports:
#      - "4200:80"
#    volumes:
#      - ./front-end:/app
#      - /app/node_modules
#    depends_on:
#      - api-gateway
#    networks:
#      - bantads-net

# =============== NETWORK ===============
networks:
  bantads-net:
    driver: bridge